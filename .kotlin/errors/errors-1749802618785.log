kotlin version: 2.0.21
error message: org.jetbrains.kotlin.backend.common.CompilationException: Back-end: Please report this problem https://kotl.in/issue
C:/Users/Administrator/AndroidStudioProjects/WeloAI Chat/app/src/main/java/com/welo/aichat/network/AIChatResponse.kt:35:1
Problem with `@Serializable
@StabilityInferred(parameters = 0)
data class OutputDetail {
  constructor(results: Results, artifacts: Artifacts, outputs: OutputsData, logs: Logs, messages: List<Message>, timedelta: Any? = null, duration: Any? = null, component_display_name: String, component_id: String, used_frozen_result: Boolean) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  val results: Results
    field = results
    get

  val artifacts: Artifacts
    field = artifacts
    get

  val outputs: OutputsData
    field = outputs
    get

  val logs: Logs
    field = logs
    get

  val messages: List<Message>
    field = messages
    get

  @Contextual
  val timedelta: Any?
    field = timedelta
    get

  val duration: Any?
    field = duration
    get

  val component_display_name: String
    field = component_display_name
    get

  val component_id: String
    field = component_id
    get

  val used_frozen_result: Boolean
    field = used_frozen_result
    get

  companion object Companion {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    fun serializer(): KSerializer<OutputDetail>

    /* fake */ override operator fun equals(other: Any?): Boolean

    /* fake */ override fun hashCode(): Int

    /* fake */ override fun toString(): String

  }

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  @StabilityInferred(parameters = 0)
  object $serializer : GeneratedSerializer<OutputDetail> {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    override fun serialize(encoder: Encoder, value: OutputDetail)

    override fun deserialize(decoder: Decoder): OutputDetail

    override val descriptor: SerialDescriptor
      override get

    override fun childSerializers(): Array<KSerializer<*>>

    /* fake */ override fun typeParametersSerializers(): Array<KSerializer<*>>

    /* fake */ override operator fun equals(other: Any?): Boolean

    /* fake */ override fun hashCode(): Int

    /* fake */ override fun toString(): String

    /* static final field */ val $stable: Int = 8
  }

  operator fun component1(): Results {
    return <this>.#results
  }

  operator fun component2(): Artifacts {
    return <this>.#artifacts
  }

  operator fun component3(): OutputsData {
    return <this>.#outputs
  }

  operator fun component4(): Logs {
    return <this>.#logs
  }

  operator fun component5(): List<Message> {
    return <this>.#messages
  }

  operator fun component6(): Any? {
    return <this>.#timedelta
  }

  operator fun component7(): Any? {
    return <this>.#duration
  }

  operator fun component8(): String {
    return <this>.#component_display_name
  }

  operator fun component9(): String {
    return <this>.#component_id
  }

  operator fun component10(): Boolean {
    return <this>.#used_frozen_result
  }

  fun copy(results: Results = <this>.#results, artifacts: Artifacts = <this>.#artifacts, outputs: OutputsData = <this>.#outputs, logs: Logs = <this>.#logs, messages: List<Message> = <this>.#messages, timedelta: Any? = <this>.#timedelta, duration: Any? = <this>.#duration, component_display_name: String = <this>.#component_display_name, component_id: String = <this>.#component_id, used_frozen_result: Boolean = <this>.#used_frozen_result): OutputDetail {
    return OutputDetail(results = results, artifacts = artifacts, outputs = outputs, logs = logs, messages = messages, timedelta = timedelta, duration = duration, component_display_name = component_display_name, component_id = component_id, used_frozen_result = used_frozen_result)
  }

  override fun toString(): String {
    return "OutputDetail(" + "results=" + <this>.#results + ", " + "artifacts=" + <this>.#artifacts + ", " + "outputs=" + <this>.#outputs + ", " + "logs=" + <this>.#logs + ", " + "messages=" + <this>.#messages + ", " + "timedelta=" + <this>.#timedelta + ", " + "duration=" + <this>.#duration + ", " + "component_display_name=" + <this>.#component_display_name + ", " + "component_id=" + <this>.#component_id + ", " + "used_frozen_result=" + <this>.#used_frozen_result + ")"
  }

  override fun hashCode(): Int {
    var result: Int = <this>.#results.hashCode()
    result = result.times(other = 31).plus(other = <this>.#artifacts.hashCode())
    result = result.times(other = 31).plus(other = <this>.#outputs.hashCode())
    result = result.times(other = 31).plus(other = <this>.#logs.hashCode())
    result = result.times(other = 31).plus(other = <this>.#messages.hashCode())
    result = result.times(other = 31).plus(other = when {
      EQEQ(arg0 = <this>.#timedelta, arg1 = null) -> 0
      else -> <this>.#timedelta.hashCode()
    })
    result = result.times(other = 31).plus(other = when {
      EQEQ(arg0 = <this>.#duration, arg1 = null) -> 0
      else -> <this>.#duration.hashCode()
    })
    result = result.times(other = 31).plus(other = <this>.#component_display_name.hashCode())
    result = result.times(other = 31).plus(other = <this>.#component_id.hashCode())
    result = result.times(other = 31).plus(other = <this>.#used_frozen_result.hashCode())
    return result
  }

  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is OutputDetail -> return false
    }
    val tmp0_other_with_cast: OutputDetail = other as OutputDetail
    when {
      EQEQ(arg0 = <this>.#results, arg1 = tmp0_other_with_cast.#results).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#artifacts, arg1 = tmp0_other_with_cast.#artifacts).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#outputs, arg1 = tmp0_other_with_cast.#outputs).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#logs, arg1 = tmp0_other_with_cast.#logs).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#messages, arg1 = tmp0_other_with_cast.#messages).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#timedelta, arg1 = tmp0_other_with_cast.#timedelta).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#duration, arg1 = tmp0_other_with_cast.#duration).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#component_display_name, arg1 = tmp0_other_with_cast.#component_display_name).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#component_id, arg1 = tmp0_other_with_cast.#component_id).not() -> return false
    }
    when {
      EQEQ(arg0 = <this>.#used_frozen_result, arg1 = tmp0_other_with_cast.#used_frozen_result).not() -> return false
    }
    return true
  }

  /* static final field */ val $stable: Int = 8
  @JvmStatic
  internal fun write$Self(self: OutputDetail, output: CompositeEncoder, serialDesc: SerialDescriptor)

  internal constructor(seen0: Int, results: Results?, artifacts: Artifacts?, outputs: OutputsData?, logs: Logs?, messages: List<Message>?, timedelta: Any?, duration: Any?, component_display_name: String?, component_id: String?, used_frozen_result: Boolean, serializationConstructorMarker: SerializationConstructorMarker?)

}

`
Details: kotlinx.serialization compiler plugin internal error: unable to transform declaration, see cause
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializerClassLowering.lower(SerializationLoweringExtension.kt:230)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitClass(SerializationLoweringExtension.kt:46)
	at org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid$DefaultImpls.visitClass(IrElementVisitorVoid.kt:44)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitClass(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitClass(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlin.ir.declarations.IrClass.accept(IrClass.kt:72)
	at org.jetbrains.kotlin.ir.declarations.IrFile.acceptChildren(IrFile.kt:34)
	at org.jetbrains.kotlin.ir.visitors.IrVisitorsKt.acceptChildrenVoid(IrVisitors.kt:15)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitElement(SerializationLoweringExtension.kt:42)
	at org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid$DefaultImpls.visitPackageFragment(IrElementVisitorVoid.kt:168)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitPackageFragment(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid$DefaultImpls.visitFile(IrElementVisitorVoid.kt:184)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitFile(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlin.ir.visitors.IrElementVisitorVoid$DefaultImpls.visitFile(IrElementVisitorVoid.kt:180)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitFile(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt$runOnFileInOrder$1.visitFile(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlin.ir.declarations.IrFile.accept(IrFile.kt:28)
	at org.jetbrains.kotlin.ir.visitors.IrVisitorsKt.acceptVoid(IrVisitors.kt:11)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtensionKt.runOnFileInOrder(SerializationLoweringExtension.kt:40)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializationLoweringExtension.generate(SerializationLoweringExtension.kt:194)
	at org.jetbrains.kotlin.fir.pipeline.ConvertToIrKt.applyIrGenerationExtensions(convertToIr.kt:442)
	at org.jetbrains.kotlin.fir.pipeline.Fir2IrPipeline.runActualizationPipeline(convertToIr.kt:246)
	at org.jetbrains.kotlin.fir.pipeline.Fir2IrPipeline.convertToIrAndActualize(convertToIr.kt:130)
	at org.jetbrains.kotlin.fir.pipeline.ConvertToIrKt.convertToIrAndActualize(convertToIr.kt:99)
	at org.jetbrains.kotlin.fir.pipeline.ConvertToIrKt.convertToIrAndActualize$default(convertToIr.kt:72)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.convertToIrAndActualizeForJvm(jvmCompilerPipeline.kt:196)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.convertAnalyzedFirToIr(jvmCompilerPipeline.kt:169)
	at org.jetbrains.kotlin.cli.jvm.compiler.pipeline.JvmCompilerPipelineKt.compileModulesUsingFrontendIrAndLightTree(jvmCompilerPipeline.kt:140)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:148)
	at org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:43)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:103)
	at org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:49)
	at org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:101)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:464)
	at org.jetbrains.kotlin.incremental.IncrementalJvmCompilerRunner.runCompiler(IncrementalJvmCompilerRunner.kt:73)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.doCompile(IncrementalCompilerRunner.kt:506)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileImpl(IncrementalCompilerRunner.kt:423)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compileNonIncrementally(IncrementalCompilerRunner.kt:301)
	at org.jetbrains.kotlin.incremental.IncrementalCompilerRunner.compile(IncrementalCompilerRunner.kt:129)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.execIncrementalCompiler(CompileServiceImpl.kt:675)
	at org.jetbrains.kotlin.daemon.CompileServiceImplBase.access$execIncrementalCompiler(CompileServiceImpl.kt:92)
	at org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1660)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(Unknown Source)
	at java.base/java.lang.reflect.Method.invoke(Unknown Source)
	at java.rmi/sun.rmi.server.UnicastServerRef.dispatch(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport$1.run(Unknown Source)
	at java.base/java.security.AccessController.doPrivileged(Unknown Source)
	at java.rmi/sun.rmi.transport.Transport.serviceCall(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport.handleMessages(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(Unknown Source)
	at java.base/java.security.AccessController.doPrivileged(Unknown Source)
	at java.rmi/sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
	at java.base/java.lang.Thread.run(Unknown Source)
Caused by: java.lang.IllegalStateException: Serializer for element of type kotlin.Any? has not been found
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.SerializerSearchUtilKt.findTypeSerializerOrContext(SerializerSearchUtil.kt:84)
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.SerializerSearchUtilKt.getIrSerialTypeInfo(SerializerSearchUtil.kt:63)
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.BaseIrGenerator.cacheableChildSerializerInstance(BaseIrGenerator.kt:488)
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.BaseIrGenerator.createCachedChildSerializers(BaseIrGenerator.kt:468)
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.SerializableIrGenerator.<init>(SerializableIrGenerator.kt:59)
	at org.jetbrains.kotlinx.serialization.compiler.backend.ir.SerializableIrGenerator$Companion.generate(SerializableIrGenerator.kt:398)
	at org.jetbrains.kotlinx.serialization.compiler.extensions.SerializerClassLowering.lower(SerializationLoweringExtension.kt:146)
	... 56 more


